require("dotenv").config();
const axios = require("axios");
const { Telegraf , Markup } = require('telegraf');
 
axios.defaults.baseURL = 'https://dbhelper.herokuapp.com/user';
const resetStore = async(chatID) => {
 await axios.patch(`/chatId/${chatID}`,{
    secondTap : false,
    firstTap : false,
    pid : null,
    offerID : null,
    app: null
  })
}

const bot = new Telegraf(process.env.TELEGRAM_TOKEN);

const appKeyboard = Markup.keyboard([["NSQ"],["TD"],["TSquad"],["Trident"],["APPIE"],])
bot.start(async(ctx) => {
 
try {
  await  axios.post("/",{
    chatId : ctx.chat.id
  })
} catch (error) {
  throw new Error(error);
}
  //  resetStore(ctx.chat.id)
  await ctx.reply('–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, —ç—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º —Å–¥–µ–ª–∞—Ç—å Naming –∏ Deeplink',appKeyboard)});


bot.on('text',async (ctx) => {
  try {
   let store = await axios.get(`/chatId/${ctx.chat.id}`)

    text = ctx.update.message.text;
  
  if (text === "–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é") {
    console.log('====================================');
  console.log(text);
  console.log('====================================');
   resetStore(ctx.chat.id);

   return ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –º–µ–Ω—é',appKeyboard)
  }
 
  if (store.data.firstTap && store.data.secondTap && store.data.app) {
    await  axios.patch(`/chatId/${ctx.chat.id}`, {
      offerID : text,
          })
          console.log('====================================');
          console.log(text);
          console.log('====================================');
  switch (store.data.app) {
  
    case "NSQ":
   await ctx.reply('Naming:',)
   await ctx.reply(`sub1%dep4lab%sub2%SUB2%sub3%SUB3%sub4%${store.data.pid}%sub5%${text} `,)
   await ctx.reply('Deeplink:',)
   await ctx.reply(`app://?sub1=dep4lab&sub2=SUB2&sub3=SUB3&sub4=${store.data.pid}&sub5=${text}`)
   await ctx.reply(`–í–∞—à –±–æ—Ç –¥–ª—è –ø—Ä–æ—à–∞—Ä–∫–∏: @depplab_apps_bot`)

   await ctx.reply('–•–æ—Ä–æ—à–µ–≥–æ –∑–∞–ª–∏–≤–∞ –≤–º–µ—Å—Ç–µ —Å DepLab‚ù§üß™',appKeyboard)

    resetStore(ctx.chat.id)

    
    break;
    case "TD":
      await ctx.reply('Naming:',)
      await ctx.reply(`baumzzx&push=richpigs&sub4=${store.data.pid}&sub5=${text}&sub2=SUB2&sub3=SUB3`,)
      await ctx.reply('Deeplink:',)
      await ctx.reply(`myapp://baumzzx&push=richpigs&sub4=${store.data.pid}&sub5=${text}&sub2=SUB2&sub3=SUB3`)
      await ctx.reply(`–í–∞—à –±–æ—Ç –¥–ª—è –ø—Ä–æ—à–∞—Ä–∫–∏: @td_appsbot`)

      await ctx.reply('–•–æ—Ä–æ—à–µ–≥–æ –∑–∞–ª–∏–≤–∞ –≤–º–µ—Å—Ç–µ —Å DepLab‚ù§üß™',appKeyboard)
      resetStore(ctx.chat.id)
      break;
    case "TSquad":
      await ctx.reply('Naming:',)
      await ctx.reply(`dep_sub2_sub3_${store.data.pid}_${text}_sub6`,)
      await ctx.reply('Deeplink:',)
      await ctx.reply(`myapp://dep_sub2_sub3_${store.data.pid}_${text}_sub6`,appKeyboard)
      await ctx.reply(`–í–∞—à –±–æ—Ç –¥–ª—è –ø—Ä–æ—à–∞—Ä–∫–∏: @tsquad_apps_bot `)

      await ctx.reply('–•–æ—Ä–æ—à–µ–≥–æ –∑–∞–ª–∏–≤–∞ –≤–º–µ—Å—Ç–µ —Å DepLab‚ù§üß™',)
   
      resetStore(ctx.chat.id)
      break;
    case "APPIE":
      await ctx.reply('Naming:',)
      await ctx.reply(`dlab_${store.data.pid}_${text}_sub2_sub3_sub4_sub5`,)
      await ctx.reply('Deeplink:',)
      await ctx.reply(`app://dlab_${store.data.pid}_${text}_sub2_sub3_sub4_sub5`,appKeyboard)
      await ctx.reply(`–í–∞—à –±–æ—Ç –¥–ª—è –ø—Ä–æ—à–∞—Ä–∫–∏: ‚Äã@appie_app_bot`)

      await ctx.reply('–•–æ—Ä–æ—à–µ–≥–æ –∑–∞–ª–∏–≤–∞ –≤–º–µ—Å—Ç–µ —Å DepLab‚ù§üß™',)
   
      resetStore(ctx.chat.id)

    break;
    case "Trident":
      await ctx.reply('Naming:',)
      await ctx.reply(`deplab_sub2_sub3_${store.data.pid}_${text}`,)
      await ctx.reply('Deeplink:',)
      await ctx.reply(`myapp://deplab/sub2/sub3/${store.data.pid}/${text}`,appKeyboard)
      await ctx.reply(`–í–∞—à –±–æ—Ç –¥–ª—è –ø—Ä–æ—à–∞—Ä–∫–∏: @trident_appbot`)

      await ctx.reply('–•–æ—Ä–æ—à–µ–≥–æ –∑–∞–ª–∏–≤–∞ –≤–º–µ—Å—Ç–µ —Å DepLab‚ù§üß™',)
   
      resetStore(ctx.chat.id)

    break;


} 

    
  }

  if ( store.data.firstTap && !store.data.secondTap) {
  await  axios.patch(`/chatId/${ctx.chat.id}`, {
pid : text,
secondTap : true,
    })

  ctx.reply("–í–≤–µ–¥–∏—Ç–µ OFFERID –Ω–∞–ø—Ä–∏–º–µ—Ä : 7", Markup.keyboard([["–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]]));

  
}



let finalyMessage = false;
if (!store.data.firstTap) {
  switch (text) {
  
    case "NSQ":
    await axios.patch(`/chatId/${ctx.chat.id}`, {
      firstTap : true,
      app : 'NSQ',
    })  
      finalyMessage = true;
    break;
    case "TD":
    await axios.patch(`/chatId/${ctx.chat.id}`, {
      firstTap : true,
      app : 'TD',
    })  

    finalyMessage = true;
    break;
    case "TSquad":
    await axios.patch(`/chatId/${ctx.chat.id}`, {
      firstTap : true,
      app : 'TSquad',
    })  

    finalyMessage = true;
    break;
    case "APPIE":
      await axios.patch(`/chatId/${ctx.chat.id}`, {
        firstTap : true,
        app : 'APPIE',
      })  
  
      finalyMessage = true;
  
      break;
      case "Trident":

    await axios.patch(`/chatId/${ctx.chat.id}`, {
      firstTap : true,
      app : 'Trident',
    })  

    finalyMessage = true;

    break;


}
if (finalyMessage) {

  ctx.reply("–í–≤–µ–¥–∏—Ç–µ PID –Ω–∞–ø—Ä–∏–º–µ—Ä : 364", Markup.keyboard([["–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]]));


}
}
  } catch (error) {
    throw new Error(error);
  }

})




bot.launch();


